# see also tests at Nictoarch.Modelling.Core.Tests/data
name: Test model
data:
  - source:  #source type is provider-specific
      type: json
      file: "../../../../Nictoarch.Common.Xml2Json.Tests/data/drawio.small.xml"   #may also be a http(s) url
    elements:
      # it is possible to not have an `extract` field in case source is already a json
      - extract: # extract element is provider-specific
          transform: xml2json
          #transform: none
        entities: |
          **[_type='object' and `service-name`].{
                'type': 'service',
                'id': `service-name` & '@' & `service-group`,
                'display_name': `service-name` & '@' & `service-group`
          }[]
        invalid: |
          **[_type='root']
                ._nested[
                   _type='mxCell'
                   and id != '0'
                   and id != '1'
                   and edge != '1'
          ]
  - source: #source type is provider-specific
      type: k8s
      #####  may specify config file:
      # config_file: "c:/Users/user/.kube/config.abc"
      #      if unspecified, will use ~/.kube/config
      #
      #####  in case of execution in cluster, it's possible to instead specify
      # use_cluster_config: true
      #
      ##### also possible to specify timeout
      # connect_timeout_seconds: 1.5
    elements:
      - extract: # extract element is provider-specific
          resource_kind: service
          namespace: default
          ## also possible to specify a label_query to filter objects at k8s server side:
          # label_query: ""
        # filter is optional, applied before transform
        filter: |
          $[
            $not($contains(metadata.name, "-exclude-"))
            and metadata.name != "something-weird"
          ]
        # element should contain either 'entities' (, 'links') or 'invalid' section
        entities: # entities - may specify explicitly how to get each part of entity
          type: "'service'"
          id: "metadata.name"
          display_name: "metadata.labels.appname & ' v' & metadata.labels.`app.kubernetes.io/version`"
      - extract: 
          resource_kind: statefulset
          namespace: cpl-services
        # entities - or just provide a single query to get everything
        entities: |
          $.{
            "type": "statefulset",
            "id": metadata.name,
            /* "display_name": metadata.name  -- optional */
          }
  - source:
      type: db
      connection: NpgsqlConnection   #name of DbConnection descendant class, eg SqlConnection (MSSWL) or MySqlConnection
      #connection_string: "Server=127.0.0.1;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;"
      connection_args:
        Server: !inplace secret.yaml#db.host   
        Port: !inplace secret.yaml#db.port
        Database: !inplace secret.yaml#db.database
        "User Id": !inplace secret.yaml#db.user
        Password: !inplace secret.yaml#db.pass
        #also possible to use `!env MY_ENV_VARIABLE`
    elements:
      - extract:
          query: |
            SELECT 
                CONCAT(t.table_schema, '.', t.table_name) as full_name, 
                c.column_name, 
                c.column_default, 
                c.data_type, 
                c.is_nullable, 
                c.character_maximum_length
            FROM information_schema.tables t
            INNER JOIN information_schema.columns c 
                ON c.table_catalog = t.table_catalog 
                AND c.table_schema = t.table_schema
                AND c.table_name = t.table_name
            WHERE t.table_type = 'BASE TABLE'
                AND t.table_schema = 'public'
        entities: |
            $${
                full_name: $.{
                    "column_name": `column_name`,
                    "data_type": `data_type`,
                    "is_nullable": `is_nullable`,
                    "column_default": `column_default`,
                    "character_maximum_length": `character_maximum_length`
                }
            }
            ~> $each(
                function($v, $k) {
                    {
                        "type": "table",
                        "id": $k,
                        "properties": $v{
                            column_name: {
                                "type": data_type,
                                "nullable": is_nullable,
                                "default": column_default,
                                "character_maximum_length": character_maximum_length
                            }
                        }
                    }
                }
            )
  - source: 
      type: combined
      sources:
        services: 
          source: 
            type: k8s
          extract:
            resource_kind: service
            namespace: default
        deployments:
          source:
            type: k8s
          extract:
            resource_kind: deployment
            namespace: default
    elements:
      - extract: {}
        links: |
          $map(
            services,
            function($s) {
              (
                $d := $$.deployments[spec.selector.matchLabels = $s.spec.selector];
                {
                  "type": "k8s_service_deployment",
                  "id": $s.metadata.name & '->' & $d.metadata.name,
                  "from": {
                    "type": "k8s_service",
                    "id": $s.metadata.name
                  },
                  "to": {
                    "type": "k8s_deployment",
                    "id": $d.metadata.name
                  }
                }
              )
            }
          ) ~> $filter(
            function($l) {
              $exists($l.to.id)
            }
          )