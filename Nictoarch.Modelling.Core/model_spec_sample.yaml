name: Test model
data:
  - source:  #source type is provider-specific
      type: json
      location: "../../../../Nictoarch.Common.Xml2Json.Tests/data/drawio.small.xml"   #may also be a http(s) url
      auth: none          # optional, used only in case of urls in location
      # auth: 
      #   type: basic
      #   user: user
      #   pass: pass
    elements:
      # it is possible to not have an `extract` field in case source is already a json
      - extract: # extract element is provider-specific
          transform: xml2json # optional
        entities: |
          **[_type='object' and `service-name`].{
                'type': 'service',
                'domain_id': `id`,
                'semantic_id': `service-name` & '@' & `service-group`,
                'display_name': `service-name` & '@' & `service-group`
          }[]
        invalid: |
          **[_type='root']
                ._nested[
                   _type='mxCell'
                   and id != '0'
                   and id != '1'
                   and edge != '1'
          ]
  - source: #source type is provider-specific
      type: k8s
      #####  may specify config file:
      # config_file: "c:/Users/user/.kube/config.abc"
      #      if unspecified, will use ~/.kube/config
      #
      ##### also possible to specify timeout
      # connect_timeout_seconds: 1.5
    elements:
      - extract: # extract element is provider-specific
          resource_kind: service
          namespace: default
          ## also possible to specify a label_query to filter objects at k8s server side:
          # label_query: ""
        # filter is optional, applied before transform
        filter: |
          $.[
                $not($contains(metadata.name, "-exclude-"))
                and metadata.name != "something-weird"
          ]
        # element should contain either 'entities' (, 'links') or 'invalid' section
        entities: # entities - may specify explicitly how to get each part of entity
          type: "'service'"
          semantic_id: "metadata.name"
          domain_id: "metadata.namespace & ':' & metadata.name"
          display_name: "metadata.labels.appname & ' v' & metadata.labels.`app.kubernetes.io/version`"
      - extract: 
          resource_kind: statefulset
          namespace: cpl-services
        # entities - or just provide a single query to get everything
        entities: |
          {
            type: "statefulset",
            semantic_id: metadata.name,
            domain_id: metadata.uid,
            display_name: metadata.name
          }
#  - source:
#      type: db
#      db_connection: NpgsqlConnection   #name of DbConnection descendant class
#      connection_string: "Server=127.0.0.1;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;"
#    elements:
#      - extract:
#          query: |
#            SELECT t.table_schema, t.table_name, c.column_name, c.column_default, c.data_type, c.is_nullable, c.character_maximum_length
#            FROM information_schema.tables t
#            INNER JOIN information_schema.columns c 
#                ON c.table_catalog = t.table_catalog 
#                AND c.table_schema = t.table_schema
#                AND c.table_name = t.table_name
#            WHERE t.table_type = 'BASE TABLE'
#                AND t.table_schema = 'public'
#        entities: 